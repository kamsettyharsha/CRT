class Node:
    def __init__(self):
        self.right=None
        self.left=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data)
            self.inorder_traversal(Node.right)  
    def preorder_traversal(self,Node):
        if Node:
            print(Node.data)
            self.preorder_traversal(Node.left)
            self.preorder_traversal(Node.right)
    def postorder_traversal(self,Node):
        if Node:
            self.postorder_traversal(Node.left)
            self.postorder_traversal(Node.right)
            print(Node.data)
    def Sum_of_Node(self,Node):
        if Node is None:
            return 0
        return Node.data + self.Sum_of_Node(Node.right)  +  self.Sum_of_Node(Node.left) 
    def count_of_Node(self):
        count=0
        if(count!=None):
            count = count+1
        count_of_Node(Node.right) 
        count_of_Node(Node.left)    


tree=Node()
tree.data=1
tree.left=Node()
tree.left.data=2
tree.right=Node()
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
tree.inorder_traversal(Node=tree)
tree.postorder_traversal(Node=tree)
tree.preorder_traversal(Node=tree)
print(tree.Sum_of_Node(Node=tree))
print(tree.Sum_of_Node(Node=tree.left))
print(tree.Sum_of_Node(Node=tree.right))





